---
import DocsLayout from '../../../layouts/DocsLayout.astro'
import { getAllDocs, findDoc } from '../../../lib/docs'
import { Button } from '../../../components/ui/button'
// Extract version param before loading overview
const { version } = Astro.params
// Load version overview from index.md and its render component
const overview = findDoc(version, 'index')
if (!overview) throw new Error(`Overview for version ${version} not found`)
// The Markdown component is the default export
const { default: Overview } = overview.module
// Gather pages for this version and derive unique categories with their titles and order
const pages = getAllDocs().filter((p) => p.version === version)
const categoryMap = new Map()
for (const p of pages) {
  const key = p.category
  if (!categoryMap.has(key)) {
    categoryMap.set(key, { category: key, title: p.title ?? key, order: typeof p.order === 'number' ? p.order : 999 })
  } else {
    // keep lowest order if multiple pages share same category
    const existing = categoryMap.get(key)
    const o = typeof p.order === 'number' ? p.order : 999
    if (o < existing.order) existing.order = o
  }
}
// Ensure the overview (category 'index') appears first, then sort the rest by `order` then title
const allCategories = Array.from(categoryMap.values())
const overviewCategory = allCategories.find((c) => c.category === 'index')
const otherCategories = allCategories
  .filter((c) => c.category !== 'index')
  .sort((a, b) => {
    if (a.order !== b.order) return a.order - b.order
    return a.title.localeCompare(b.title)
  })
const categories = overviewCategory ? [overviewCategory, ...otherCategories] : otherCategories

// Frontmatter: add BASE_URL for correct link prefixes
const base = import.meta.env.BASE_URL;

export async function getStaticPaths() {
  const pages = getAllDocs()
  const versions = [...new Set(pages.map((p) => p.version))]
  return versions.map((version) => ({ params: { version } }))
}
---

<DocsLayout title={`Dokumentasi ${version}`}>
  <div slot="sidebar">
    <div class="space-y-1">
      <div class="px-3 py-2 text-sm font-medium text-muted-foreground">
        Versi {version}
      </div>
      {categories.map(({ category, title }) => {
        const isIndex = category === 'index'
        const href = isIndex ? `${base}docs/${version}/` : `${base}docs/${version}/${category}`
        return (
          <Button variant={isIndex ? "default" : "ghost"} size="sm" asChild className="w-full justify-start h-9 px-3">
            <a
              href={href}
              class={`flex items-center gap-3 ${isIndex ? 'text-primary font-semibold' : ''}`}
              aria-current={isIndex ? 'page' : undefined}
            >
              <div class={`w-1 h-1 rounded-full ${isIndex ? 'bg-primary-foreground' : 'bg-muted-foreground/40'}`}></div>
              {title}
            </a>
          </Button>
        )
      })}
    </div>
  </div>

  <!-- Hero section -->
  <div class="space-y-6">
    <!-- Content from markdown -->
    <div class="border-t pt-8">
      <Overview />
    </div>
  </div>
</DocsLayout>
